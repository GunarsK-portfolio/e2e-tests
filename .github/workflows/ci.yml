name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual trigger

env:
  PYTHON_VERSION: '3.12'

jobs:
  # Job 1: Code Quality - Python linting and formatting
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Check formatting with black
        run: black --check .

      - name: Check import sorting with isort
        run: isort --check-only --profile black .

      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  # Job 2: Test Configuration - Validate test setup
  test-config:
    name: Test Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Playwright
        run: |
          pip install playwright
          playwright install --with-deps chromium

      - name: Verify .env.example exists
        run: |
          if [ ! -f .env.example ]; then
            echo "ERROR: .env.example not found"
            exit 1
          fi
          echo ".env.example found"

      - name: Verify test structure
        run: |
          python -c "
          import sys
          from pathlib import Path

          required_dirs = [
              'e2e/common',
              'e2e/auth',
              'e2e/profile',
              'e2e/skills',
              'e2e/experience',
              'e2e/certifications',
              'e2e/miniatures'
          ]

          missing = []
          for dir_path in required_dirs:
              if not Path(dir_path).exists():
                  missing.append(dir_path)

          if missing:
              print(f'ERROR: Missing directories: {missing}')
              sys.exit(1)

          print('All required directories exist')
          "

      - name: Validate Python imports
        run: |
          python -c "
          import sys
          sys.path.insert(0, 'e2e')

          try:
              from common.config import get_config
              from auth.auth_manager import AuthManager
              print('âœ“ All imports successful')
          except ImportError as e:
              print(f'ERROR: Import failed: {e}')
              sys.exit(1)
          "

  # Job 3: Dry Run - Test suite runner without actual execution
  test-dry-run:
    name: Test Dry Run
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Playwright
        run: |
          pip install playwright
          playwright install --with-deps chromium

      - name: Verify test runner exists
        run: |
          if [ ! -f run_all_tests.py ]; then
            echo "ERROR: run_all_tests.py not found"
            exit 1
          fi
          python -m py_compile run_all_tests.py
          echo "Test runner compiles successfully"

      - name: Verify all test files compile
        run: |
          python -m compileall e2e/

  # Job 4: Documentation Check
  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check README exists
        run: |
          if [ ! -f README.md ]; then
            echo "ERROR: README.md not found"
            exit 1
          fi
          echo "README.md exists"

      - name: Check Taskfile exists
        run: |
          if [ ! -f Taskfile.yml ]; then
            echo "ERROR: Taskfile.yml not found"
            exit 1
          fi
          echo "Taskfile.yml exists"

      - name: Verify documentation completeness
        run: |
          # Check if README has essential sections
          grep -q "Quick Start" README.md || { echo "Missing Quick Start"; exit 1; }
          grep -q "Prerequisites" README.md || { echo "Missing Prerequisites"; exit 1; }
          grep -q "Running Tests" README.md || { echo "Missing Running Tests"; exit 1; }
          grep -q "Test Coverage" README.md || { echo "Missing Test Coverage"; exit 1; }
          echo "Documentation is complete"

  # Summary job - require all to pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [code-quality, test-config, test-dry-run, documentation]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!"
